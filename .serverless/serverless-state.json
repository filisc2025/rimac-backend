{
  "service": {
    "service": "rimac-appointments",
    "serviceObject": {
      "name": "rimac-appointments"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "us-east-1",
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:Query",
                "dynamodb:UpdateItem",
                "dynamodb:Scan"
              ],
              "Resource": [
                "arn:aws:dynamodb:us-east-1:257394458575:table/AppointmentTable",
                "arn:aws:dynamodb:us-east-1:257394458575:table/AppointmentTable/index/123"
              ]
            }
          ]
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CreateAppointmentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rimac-appointments-dev-createAppointment"
            }
          },
          "GetAppointmentsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rimac-appointments-dev-getAppointments"
            }
          },
          "AppointmentUnderscorepeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rimac-appointments-dev-appointment_pe"
            }
          },
          "AppointmentUnderscoreclLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rimac-appointments-dev-appointment_cl"
            }
          },
          "UpdateAppointmentStatusLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rimac-appointments-dev-updateAppointmentStatus"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "rimac-appointments",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rimac-appointments-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rimac-appointments-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                        ],
                        "Resource": [
                          "arn:aws:sqs:us-east-1:257394458575:SQS_PE",
                          "arn:aws:sqs:us-east-1:257394458575:SQS_CL"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "rimac-appointments",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreateAppointmentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rimac-appointments/dev/1757088231759-2025-09-05T16:03:51.759Z/rimac-appointments.zip"
              },
              "Handler": "dist/handlers/createAppointment.createAppointment",
              "Runtime": "nodejs18.x",
              "FunctionName": "rimac-appointments-dev-createAppointment",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateAppointmentLogGroup"
            ]
          },
          "GetAppointmentsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rimac-appointments/dev/1757088231759-2025-09-05T16:03:51.759Z/rimac-appointments.zip"
              },
              "Handler": "dist/handlers/getAppointments.getAppointments",
              "Runtime": "nodejs18.x",
              "FunctionName": "rimac-appointments-dev-getAppointments",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAppointmentsLogGroup"
            ]
          },
          "AppointmentUnderscorepeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rimac-appointments/dev/1757088231759-2025-09-05T16:03:51.759Z/rimac-appointments.zip"
              },
              "Handler": "dist/handlers/appointment_pe.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "rimac-appointments-dev-appointment_pe",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AppointmentUnderscorepeLogGroup"
            ]
          },
          "AppointmentUnderscoreclLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rimac-appointments/dev/1757088231759-2025-09-05T16:03:51.759Z/rimac-appointments.zip"
              },
              "Handler": "dist/handlers/appointment_cl.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "rimac-appointments-dev-appointment_cl",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AppointmentUnderscoreclLogGroup"
            ]
          },
          "UpdateAppointmentStatusLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rimac-appointments/dev/1757088231759-2025-09-05T16:03:51.759Z/rimac-appointments.zip"
              },
              "Handler": "dist/handlers/updateAppointmentStatus.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "rimac-appointments-dev-updateAppointmentStatus",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateAppointmentStatusLogGroup"
            ]
          },
          "CreateAppointmentLambdaVersionbT9YCi0hRPT3y7XyLDMZIBWrGDBtgdRCHREhTWvWA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateAppointmentLambdaFunction"
              },
              "CodeSha256": "ZA+ioF8oUWlbnpYEkVI9xeecfXVagaVX201Pd8lQo+o="
            }
          },
          "GetAppointmentsLambdaVersion9dufMOqMs3kVbJobtLGpQ4f04c4JjF2bZpf694NGg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAppointmentsLambdaFunction"
              },
              "CodeSha256": "ZA+ioF8oUWlbnpYEkVI9xeecfXVagaVX201Pd8lQo+o="
            }
          },
          "AppointmentUnderscorepeLambdaVersionEjbH6e1qbTOgNxBIfhMV06RpOQ1QqFNNZWgeZV5c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AppointmentUnderscorepeLambdaFunction"
              },
              "CodeSha256": "ZA+ioF8oUWlbnpYEkVI9xeecfXVagaVX201Pd8lQo+o="
            }
          },
          "AppointmentUnderscoreclLambdaVersion9YRVGYcppDOixillehanLiWowaW9nGuvUJU9FQ7ArU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AppointmentUnderscoreclLambdaFunction"
              },
              "CodeSha256": "ZA+ioF8oUWlbnpYEkVI9xeecfXVagaVX201Pd8lQo+o="
            }
          },
          "UpdateAppointmentStatusLambdaVersionnGKfjvkv49pNDByUjK3ZAHlYNdXUtFXCpAcF2xqH3Y": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateAppointmentStatusLambdaFunction"
              },
              "CodeSha256": "ZA+ioF8oUWlbnpYEkVI9xeecfXVagaVX201Pd8lQo+o="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-rimac-appointments",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceAppointments": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "appointments",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAppointmentsInsuredidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAppointments"
              },
              "PathPart": "{insuredId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAppointmentsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppointments"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAppointmentsInsuredidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppointmentsInsuredidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAppointmentsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppointments"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateAppointmentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateAppointmentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAppointmentsInsuredidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppointmentsInsuredidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAppointmentsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetAppointmentsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1757088225236": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodAppointmentsOptions",
              "ApiGatewayMethodAppointmentsInsuredidVarOptions",
              "ApiGatewayMethodAppointmentsPost",
              "ApiGatewayMethodAppointmentsInsuredidVarGet"
            ]
          },
          "CreateAppointmentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateAppointmentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAppointmentsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAppointmentsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RimacappointmentsdevupdateAppointmentStatusrule1EventBridgeRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "EventPattern": {
                "source": [
                  "appointment"
                ],
                "detail-type": [
                  "AppointmentConformity"
                ]
              },
              "Name": "rimac-appointments-dev-updateAppointmentStatus-rule-1",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "UpdateAppointmentStatusLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "rimac-appointments-dev-updateAppointmentStatus-rule-1-target"
                }
              ]
            }
          },
          "UpdateAppointmentStatusEventBridgeLambdaPermission1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:InvokeFunction",
              "FunctionName": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RimacappointmentsdevupdateAppointmentStatusrule1EventBridgeRule\"][\"Properties\"][\"Targets\"][0][\"Arn\"]"
              },
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  ":",
                  [
                    "arn",
                    {
                      "Ref": "AWS::Partition"
                    },
                    "events",
                    {
                      "Ref": "AWS::Region"
                    },
                    {
                      "Ref": "AWS::AccountId"
                    },
                    {
                      "Fn::Join": [
                        "/",
                        [
                          "rule",
                          "rimac-appointments-dev-updateAppointmentStatus-rule-1"
                        ]
                      ]
                    }
                  ]
                ]
              }
            }
          },
          "AppointmentUnderscorepeEventSourceMappingSQSSQSPE": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 10,
              "EventSourceArn": "arn:aws:sqs:us-east-1:257394458575:SQS_PE",
              "FunctionName": {
                "Fn::GetAtt": [
                  "AppointmentUnderscorepeLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "AppointmentUnderscoreclEventSourceMappingSQSSQSCL": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 10,
              "EventSourceArn": "arn:aws:sqs:us-east-1:257394458575:SQS_CL",
              "FunctionName": {
                "Fn::GetAtt": [
                  "AppointmentUnderscoreclLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "AppointmentTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "AppointmentTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "SNSPE": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "SNS_PE_RIMAC"
            }
          },
          "SNSCL": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "SNS_CL_RIMAC"
            }
          },
          "EventBus": {
            "Type": "AWS::Events::EventBus",
            "Properties": {
              "Name": "rimac-appointments-bus"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-rimac-appointments-dev-ServerlessDeploymentBucketName"
            }
          },
          "CreateAppointmentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateAppointmentLambdaVersionbT9YCi0hRPT3y7XyLDMZIBWrGDBtgdRCHREhTWvWA"
            },
            "Export": {
              "Name": "sls-rimac-appointments-dev-CreateAppointmentLambdaFunctionQualifiedArn"
            }
          },
          "GetAppointmentsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAppointmentsLambdaVersion9dufMOqMs3kVbJobtLGpQ4f04c4JjF2bZpf694NGg"
            },
            "Export": {
              "Name": "sls-rimac-appointments-dev-GetAppointmentsLambdaFunctionQualifiedArn"
            }
          },
          "AppointmentUnderscorepeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AppointmentUnderscorepeLambdaVersionEjbH6e1qbTOgNxBIfhMV06RpOQ1QqFNNZWgeZV5c"
            },
            "Export": {
              "Name": "sls-rimac-appointments-dev-AppointmentUnderscorepeLambdaFunctionQualifiedArn"
            }
          },
          "AppointmentUnderscoreclLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AppointmentUnderscoreclLambdaVersion9YRVGYcppDOixillehanLiWowaW9nGuvUJU9FQ7ArU"
            },
            "Export": {
              "Name": "sls-rimac-appointments-dev-AppointmentUnderscoreclLambdaFunctionQualifiedArn"
            }
          },
          "UpdateAppointmentStatusLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateAppointmentStatusLambdaVersionnGKfjvkv49pNDByUjK3ZAHlYNdXUtFXCpAcF2xqH3Y"
            },
            "Export": {
              "Name": "sls-rimac-appointments-dev-UpdateAppointmentStatusLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-rimac-appointments-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "createAppointment": {
        "handler": "dist/handlers/createAppointment.createAppointment",
        "events": [
          {
            "http": {
              "path": "appointments",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rimac-appointments-dev-createAppointment",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateAppointmentLambdaVersionbT9YCi0hRPT3y7XyLDMZIBWrGDBtgdRCHREhTWvWA"
      },
      "getAppointments": {
        "handler": "dist/handlers/getAppointments.getAppointments",
        "events": [
          {
            "http": {
              "path": "appointments/{insuredId}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rimac-appointments-dev-getAppointments",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetAppointmentsLambdaVersion9dufMOqMs3kVbJobtLGpQ4f04c4JjF2bZpf694NGg"
      },
      "appointment_pe": {
        "handler": "dist/handlers/appointment_pe.handler",
        "events": [
          {
            "sqs": {
              "arn": "arn:aws:sqs:us-east-1:257394458575:SQS_PE"
            }
          }
        ],
        "name": "rimac-appointments-dev-appointment_pe",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AppointmentUnderscorepeLambdaVersionEjbH6e1qbTOgNxBIfhMV06RpOQ1QqFNNZWgeZV5c"
      },
      "appointment_cl": {
        "handler": "dist/handlers/appointment_cl.handler",
        "events": [
          {
            "sqs": {
              "arn": "arn:aws:sqs:us-east-1:257394458575:SQS_CL"
            }
          }
        ],
        "name": "rimac-appointments-dev-appointment_cl",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AppointmentUnderscoreclLambdaVersion9YRVGYcppDOixillehanLiWowaW9nGuvUJU9FQ7ArU"
      },
      "updateAppointmentStatus": {
        "handler": "dist/handlers/updateAppointmentStatus.handler",
        "events": [
          {
            "eventBridge": {
              "pattern": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RimacappointmentsdevupdateAppointmentStatusrule1EventBridgeRule\"][\"Properties\"][\"EventPattern\"]"
              }
            }
          }
        ],
        "name": "rimac-appointments-dev-updateAppointmentStatus",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateAppointmentStatusLambdaVersionnGKfjvkv49pNDByUjK3ZAHlYNdXUtFXCpAcF2xqH3Y"
      }
    },
    "resources": {
      "Resources": {
        "AppointmentTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "AppointmentTable",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "SNSPE": {
          "Type": "AWS::SNS::Topic",
          "Properties": {
            "TopicName": "SNS_PE_RIMAC"
          }
        },
        "SNSCL": {
          "Type": "AWS::SNS::Topic",
          "Properties": {
            "TopicName": "SNS_CL_RIMAC"
          }
        },
        "EventBus": {
          "Type": "AWS::Events::EventBus",
          "Properties": {
            "Name": "rimac-appointments-bus"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "rimac-appointments",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\xampp\\htdocs\\prueba-rimac\\rimac-test\\.serverless\\rimac-appointments.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/rimac-appointments/dev/1757088231759-2025-09-05T16:03:51.759Z",
    "artifact": "rimac-appointments.zip"
  }
}